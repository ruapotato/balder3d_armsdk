// Generated by HLC 4.2.5 (HL v4)
#ifndef INC_iron__RenderPath
#define INC_iron__RenderPath
typedef struct _iron__$RenderPath *iron__$RenderPath;
typedef struct _iron__RenderPath *iron__RenderPath;
#include <hl/types/ArrayObj.h>
#include <iron/RenderPath.h>
#include <hl/Class.h>
#include <hl/BaseType.h>
#include <_std/String.h>
#include <iron/RenderTarget.h>
#include <iron/object/LightObject.h>
#include <kha/graphics4/VertexBuffer.h>
#include <kha/Image.h>
#include <kha/graphics4/PipelineState.h>
#include <kha/math/FastMatrix3.h>
#include <kha/math/FastMatrix4.h>
#include <kha/graphics4/IndexBuffer.h>
#include <kha/arrays/ByteArrayPrivate.h>
#include <kha/graphics4/CubeMap.h>
#include <haxe/ds/StringMap.h>


typedef struct {
	HL__ENUM_CONSTRUCT__
	hl__types__ArrayObj p0;
	hl__types__ArrayObj p1;
	iron__RenderPath p2;
} Enumt$ctx_93b0219;
struct _iron__$RenderPath {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
	iron__RenderPath active;
	vclosure* setActive;
	vclosure* sortMeshesDistance;
	vclosure* sortMeshesShader;
};
struct _iron__RenderPath {
	hl_type *$type;
	bool frameScissor;
	int frameScissorX;
	int frameScissorY;
	int frameScissorW;
	int frameScissorH;
	double frameTime;
	int frame;
	iron__RenderTarget currentTarget;
	int currentFace;
	iron__object__LightObject light;
	iron__object__LightObject sun;
	iron__object__LightObject point;
	bool isProbePlanar;
	bool isProbeCube;
	bool isProbe;
	vvirtual* currentG;
	vvirtual* frameG;
	int drawOrder;
	bool paused;
	bool ready;
	vclosure* commands;
	vclosure* setupDepthTexture;
	haxe__ds__StringMap renderTargets;
	haxe__ds__StringMap depthToRenderTarget;
	int currentW;
	int currentH;
	int currentD;
	int lastW;
	int lastH;
	hl__types__ArrayObj bindParams;
	bool meshesSorted;
	bool scissorSet;
	bool viewportScaled;
	double lastFrameTime;
	int loading;
	haxe__ds__StringMap cachedShaderContexts;
	hl__types__ArrayObj depthBuffers;
	hl__types__ArrayObj additionalTargets;
};
#endif

