// Generated by HLC 4.2.5 (HL v4)
#ifndef HL_NATIVES_H
#define HL_NATIVES_H
// Abstract decls
typedef struct _hl_bytes_map hl_bytes_map;
typedef struct _hl_int_map hl_int_map;
typedef struct _hl_obj_map hl_obj_map;
typedef struct _hl_random hl_random;

#include <hl/natives.h>
#include <_std/String.h>

// Natives functions
HL_API void bullet_ClosestConvexResultCallback_delete(vbyte*);
HL_API vbyte* bullet_ClosestConvexResultCallback_get_m_hitNormalWorld(vbyte*);
HL_API vbyte* bullet_ClosestConvexResultCallback_get_m_hitPointWorld(vbyte*);
HL_API vbyte* bullet_ClosestConvexResultCallback_new2(vbyte*,vbyte*);
HL_API void bullet_ClosestRayResultCallback_delete(vbyte*);
HL_API vbyte* bullet_ClosestRayResultCallback_get_m_hitNormalWorld(vbyte*);
HL_API vbyte* bullet_ClosestRayResultCallback_get_m_hitPointWorld(vbyte*);
HL_API vbyte* bullet_ClosestRayResultCallback_new2(vbyte*,vbyte*);
HL_API float bullet_ConvexResultCallback_get_m_closestHitFraction(vbyte*);
HL_API bool bullet_ConvexResultCallback_hasHit0(vbyte*);
HL_API unsigned short bullet_ConvexResultCallback_set_m_collisionFilterGroup(vbyte*,unsigned short);
HL_API unsigned short bullet_ConvexResultCallback_set_m_collisionFilterMask(vbyte*,unsigned short);
HL_API vbyte* bullet_RayResultCallback_get_m_collisionObject(vbyte*);
HL_API bool bullet_RayResultCallback_hasHit0(vbyte*);
HL_API unsigned short bullet_RayResultCallback_set_m_collisionFilterGroup(vbyte*,unsigned short);
HL_API unsigned short bullet_RayResultCallback_set_m_collisionFilterMask(vbyte*,unsigned short);
HL_API vbyte* bullet_btBoxShape_new1(vbyte*);
HL_API vbyte* bullet_btBvhTriangleMeshShape_new3(vbyte*,bool,vdynamic*);
HL_API vbyte* bullet_btCapsuleShapeZ_new2(float,float);
HL_API vbyte* bullet_btCollisionDispatcher_new1(vbyte*);
HL_API void bullet_btCollisionObject_activate1(vbyte*,vdynamic*);
HL_API int bullet_btCollisionObject_getCollisionFlags0(vbyte*);
HL_API vbyte* bullet_btCollisionObject_getCollisionShape0(vbyte*);
HL_API int bullet_btCollisionObject_getUserIndex0(vbyte*);
HL_API vbyte* bullet_btCollisionObject_getWorldTransform0(vbyte*);
HL_API bool bullet_btCollisionObject_isActive0(vbyte*);
HL_API void bullet_btCollisionObject_setActivationState1(vbyte*,int);
HL_API void bullet_btCollisionObject_setCcdMotionThreshold1(vbyte*,float);
HL_API void bullet_btCollisionObject_setCcdSweptSphereRadius1(vbyte*,float);
HL_API void bullet_btCollisionObject_setCollisionFlags1(vbyte*,int);
HL_API void bullet_btCollisionObject_setFriction1(vbyte*,float);
HL_API void bullet_btCollisionObject_setRestitution1(vbyte*,float);
HL_API void bullet_btCollisionObject_setRollingFriction1(vbyte*,float);
HL_API void bullet_btCollisionObject_setUserIndex1(vbyte*,int);
HL_API void bullet_btCollisionShape_calculateLocalInertia2(vbyte*,float,vbyte*);
HL_API void bullet_btCollisionShape_delete(vbyte*);
HL_API void bullet_btCollisionShape_setLocalScaling1(vbyte*,vbyte*);
HL_API void bullet_btCollisionWorld_convexSweepTest5(vbyte*,vbyte*,vbyte*,vbyte*,vbyte*,float);
HL_API void bullet_btCollisionWorld_debugDrawWorld0(vbyte*);
HL_API void bullet_btCollisionWorld_rayTest3(vbyte*,vbyte*,vbyte*,vbyte*);
HL_API void bullet_btCollisionWorld_updateSingleAabb1(vbyte*,vbyte*);
HL_API vbyte* bullet_btConeShapeZ_new2(float,float);
HL_API void bullet_btConvexHullShape_addPoint2(vbyte*,vbyte*,vdynamic*);
HL_API vbyte* bullet_btConvexHullShape_new0(void);
HL_API vbyte* bullet_btCylinderShapeZ_new1(vbyte*);
HL_API vbyte* bullet_btDbvtBroadphase_new0(void);
HL_API vbyte* bullet_btDefaultCollisionConfiguration_new1(vbyte*);
HL_API vbyte* bullet_btDefaultMotionState_new2(vbyte*,vbyte*);
HL_API void bullet_btDiscreteDynamicsWorld_addConstraint2(vbyte*,vbyte*,vdynamic*);
HL_API void bullet_btDiscreteDynamicsWorld_addRigidBody1(vbyte*,vbyte*);
HL_API void bullet_btDiscreteDynamicsWorld_addRigidBody3(vbyte*,vbyte*,unsigned short,unsigned short);
HL_API vbyte* bullet_btDiscreteDynamicsWorld_getGravity0(vbyte*);
HL_API vbyte* bullet_btDiscreteDynamicsWorld_new4(vbyte*,vbyte*,vbyte*,vbyte*);
HL_API void bullet_btDiscreteDynamicsWorld_removeConstraint1(vbyte*,vbyte*);
HL_API void bullet_btDiscreteDynamicsWorld_removeRigidBody1(vbyte*,vbyte*);
HL_API void bullet_btDiscreteDynamicsWorld_setGravity1(vbyte*,vbyte*);
HL_API int bullet_btDiscreteDynamicsWorld_stepSimulation3(vbyte*,float,vdynamic*,vdynamic*);
HL_API vbyte* bullet_btDispatcher_getManifoldByIndexInternal1(vbyte*,int);
HL_API int bullet_btDispatcher_getNumManifolds0(vbyte*);
HL_API vbyte* bullet_btGImpactMeshShape_new1(vbyte*);
HL_API void bullet_btGImpactMeshShape_registerAlgorithm1(vbyte*,vbyte*);
HL_API void bullet_btGImpactMeshShape_updateBound0(vbyte*);
HL_API vbyte* bullet_btGeneric6DofConstraint_new3(vbyte*,vbyte*,bool);
HL_API vbyte* bullet_btGeneric6DofConstraint_new5(vbyte*,vbyte*,vbyte*,vbyte*,bool);
HL_API void bullet_btGeneric6DofConstraint_setAngularLowerLimit1(vbyte*,vbyte*);
HL_API void bullet_btGeneric6DofConstraint_setAngularLowerLimit1(vbyte*,vbyte*);
HL_API void bullet_btGeneric6DofConstraint_setAngularUpperLimit1(vbyte*,vbyte*);
HL_API void bullet_btGeneric6DofConstraint_setAngularUpperLimit1(vbyte*,vbyte*);
HL_API void bullet_btGeneric6DofConstraint_setLinearLowerLimit1(vbyte*,vbyte*);
HL_API void bullet_btGeneric6DofConstraint_setLinearLowerLimit1(vbyte*,vbyte*);
HL_API void bullet_btGeneric6DofConstraint_setLinearUpperLimit1(vbyte*,vbyte*);
HL_API void bullet_btGeneric6DofConstraint_setLinearUpperLimit1(vbyte*,vbyte*);
HL_API void bullet_btGeneric6DofSpringConstraint_enableSpring2(vbyte*,int,bool);
HL_API vbyte* bullet_btGeneric6DofSpringConstraint_new3(vbyte*,vbyte*,bool);
HL_API vbyte* bullet_btGeneric6DofSpringConstraint_new5(vbyte*,vbyte*,vbyte*,vbyte*,bool);
HL_API void bullet_btGeneric6DofSpringConstraint_setDamping2(vbyte*,int,float);
HL_API void bullet_btGeneric6DofSpringConstraint_setStiffness2(vbyte*,int,float);
HL_API vbyte* bullet_btHingeConstraint_new4(vbyte*,vbyte*,vbyte*,vdynamic*);
HL_API vbyte* bullet_btHingeConstraint_new7(vbyte*,vbyte*,vbyte*,vbyte*,vbyte*,vbyte*,vdynamic*);
HL_API void bullet_btHingeConstraint_setLimit5(vbyte*,float,float,float,float,vdynamic*);
HL_API void bullet_btManifoldPoint_delete(vbyte*);
HL_API double bullet_btManifoldPoint_getAppliedImpulse0(vbyte*);
HL_API double bullet_btManifoldPoint_getDistance0(vbyte*);
HL_API vbyte* bullet_btManifoldPoint_get_m_normalWorldOnB(vbyte*);
HL_API vbyte* bullet_btManifoldPoint_get_m_positionWorldOnA(vbyte*);
HL_API vbyte* bullet_btManifoldPoint_get_m_positionWorldOnB(vbyte*);
HL_API void bullet_btMotionState_delete(vbyte*);
HL_API void bullet_btMotionState_setWorldTransform1(vbyte*,vbyte*);
HL_API vbyte* bullet_btPersistentManifold_getBody00(vbyte*);
HL_API vbyte* bullet_btPersistentManifold_getBody10(vbyte*);
HL_API vbyte* bullet_btPersistentManifold_getContactPoint1(vbyte*,int);
HL_API int bullet_btPersistentManifold_getNumContacts0(vbyte*);
HL_API vbyte* bullet_btPoint2PointConstraint_new2(vbyte*,vbyte*);
HL_API vbyte* bullet_btPoint2PointConstraint_new4(vbyte*,vbyte*,vbyte*,vbyte*);
HL_API float bullet_btQuadWord_w0(vbyte*);
HL_API float bullet_btQuadWord_x0(vbyte*);
HL_API float bullet_btQuadWord_y0(vbyte*);
HL_API float bullet_btQuadWord_z0(vbyte*);
HL_API void bullet_btQuaternion_delete(vbyte*);
HL_API vbyte* bullet_btQuaternion_new4(float,float,float,float);
HL_API void bullet_btQuaternion_setValue4(vbyte*,float,float,float,float);
HL_API void bullet_btRigidBodyConstructionInfo_delete(vbyte*);
HL_API vbyte* bullet_btRigidBodyConstructionInfo_new4(float,vbyte*,vbyte*,vbyte*);
HL_API void bullet_btRigidBody_applyCentralForce1(vbyte*,vbyte*);
HL_API void bullet_btRigidBody_applyCentralImpulse1(vbyte*,vbyte*);
HL_API void bullet_btRigidBody_applyForce2(vbyte*,vbyte*,vbyte*);
HL_API void bullet_btRigidBody_applyImpulse2(vbyte*,vbyte*,vbyte*);
HL_API void bullet_btRigidBody_applyTorque1(vbyte*,vbyte*);
HL_API void bullet_btRigidBody_applyTorqueImpulse1(vbyte*,vbyte*);
HL_API void bullet_btRigidBody_delete(vbyte*);
HL_API vbyte* bullet_btRigidBody_getAngularVelocity0(vbyte*);
HL_API vbyte* bullet_btRigidBody_getLinearVelocity0(vbyte*);
HL_API vbyte* bullet_btRigidBody_getMotionState0(vbyte*);
HL_API vbyte* bullet_btRigidBody_new1(vbyte*);
HL_API void bullet_btRigidBody_setAngularFactor1(vbyte*,vbyte*);
HL_API void bullet_btRigidBody_setAngularVelocity1(vbyte*,vbyte*);
HL_API void bullet_btRigidBody_setCenterOfMassTransform1(vbyte*,vbyte*);
HL_API void bullet_btRigidBody_setDamping2(vbyte*,float,float);
HL_API void bullet_btRigidBody_setGravity1(vbyte*,vbyte*);
HL_API void bullet_btRigidBody_setLinearFactor1(vbyte*,vbyte*);
HL_API void bullet_btRigidBody_setLinearVelocity1(vbyte*,vbyte*);
HL_API void bullet_btRigidBody_setSleepingThresholds2(vbyte*,float,float);
HL_API vbyte* bullet_btSequentialImpulseConstraintSolver_new0(void);
HL_API vbyte* bullet_btSliderConstraint_new3(vbyte*,vbyte*,bool);
HL_API vbyte* bullet_btSliderConstraint_new5(vbyte*,vbyte*,vbyte*,vbyte*,bool);
HL_API void bullet_btSliderConstraint_setLowerAngLimit1(vbyte*,float);
HL_API void bullet_btSliderConstraint_setLowerLinLimit1(vbyte*,float);
HL_API void bullet_btSliderConstraint_setUpperAngLimit1(vbyte*,float);
HL_API void bullet_btSliderConstraint_setUpperLinLimit1(vbyte*,float);
HL_API vbyte* bullet_btSphereShape_new1(float);
HL_API void bullet_btTransform_delete(vbyte*);
HL_API vbyte* bullet_btTransform_getOrigin0(vbyte*);
HL_API vbyte* bullet_btTransform_getRotation0(vbyte*);
HL_API vbyte* bullet_btTransform_new0(void);
HL_API vbyte* bullet_btTransform_new2(vbyte*,vbyte*);
HL_API void bullet_btTransform_setIdentity0(vbyte*);
HL_API void bullet_btTransform_setOrigin1(vbyte*,vbyte*);
HL_API void bullet_btTransform_setRotation1(vbyte*,vbyte*);
HL_API void bullet_btTriangleMesh_addTriangle4(vbyte*,vbyte*,vbyte*,vbyte*,vdynamic*);
HL_API void bullet_btTriangleMesh_delete(vbyte*);
HL_API vbyte* bullet_btTriangleMesh_new2(vdynamic*,vdynamic*);
HL_API void bullet_btTypedConstraint_delete(vbyte*);
HL_API void bullet_btTypedConstraint_setBreakingImpulseThreshold1(vbyte*,float);
HL_API void bullet_btVector3_delete(vbyte*);
HL_API vbyte* bullet_btVector3_new3(float,float,float);
HL_API void bullet_btVector3_setValue3(vbyte*,float,float,float);
HL_API void bullet_btVector3_setX1(vbyte*,float);
HL_API void bullet_btVector3_setY1(vbyte*,float);
HL_API void bullet_btVector3_setZ1(vbyte*,float);
HL_API float bullet_btVector3_x0(vbyte*);
HL_API float bullet_btVector3_y0(vbyte*);
HL_API float bullet_btVector3_z0(vbyte*);
HL_API int bullet_debugDrawer_getDebugMode(void);
HL_API void bullet_debugDrawer_setDebugMode(int);
HL_API void bullet_debugDrawer_setDraw3dText(vclosure*);
HL_API void bullet_debugDrawer_setDrawContactPoint(vclosure*);
HL_API void bullet_debugDrawer_setDrawLine(vclosure*);
HL_API void bullet_debugDrawer_setReportErrorWarning(vclosure*);
HL_API void bullet_debugDrawer_worldSetGlobalDebugDrawer(vbyte*);
HL_API varray* hl_alloc_array(hl_type*,int);
HL_API vbyte* hl_alloc_bytes(int);
HL_API vbyte* hl_alloc_bytes(int);
HL_API vdynamic* hl_alloc_enum_dyn(hl_type*,int,varray*,int);
HL_API vdynamic* hl_alloc_obj(hl_type*);
HL_API void hl_array_blit(varray*,int,varray*,int,int);
HL_API hl_type* hl_array_type(varray*);
HL_API void hl_breakpoint(void);
HL_API void hl_bsort_f64(vbyte*,int,int,vclosure*);
HL_API void hl_bsort_i32(vbyte*,int,int,vclosure*);
HL_API void hl_bytes_blit(vbyte*,int,vbyte*,int,int);
HL_API int hl_bytes_compare(vbyte*,int,vbyte*,int,int);
HL_API int hl_bytes_compare16(vbyte*,vbyte*,int);
HL_API void hl_bytes_fill(vbyte*,int,int,int);
HL_API int hl_bytes_find(vbyte*,int,int,vbyte*,int,int);
HL_API vdynamic* hl_call_method(vdynamic*,varray*);
HL_API int hl_date_from_string(vbyte*,int);
HL_API int hl_date_from_time(double);
HL_API double hl_date_get_time(int);
HL_API int hl_date_new(int,int,int,int,int,int);
HL_API vbyte* hl_date_to_string(int,int*);
HL_API varray* hl_enum_parameters(vdynamic*);
HL_API varray* hl_exception_stack(void);
HL_API vbyte* hl_file_contents(vbyte*,int*);
HL_API vbyte* hl_ftos(double,int*);
HL_API vdynamic* hl_get_closure_value(vdynamic*);
HL_API vdynamic* hl_get_virtual_value(vdynamic*);
HL_API int hl_hash(vbyte*);
HL_API hl_bytes_map* hl_hballoc(void);
HL_API bool hl_hbexists(hl_bytes_map*,vbyte*);
HL_API vdynamic* hl_hbget(hl_bytes_map*,vbyte*);
HL_API varray* hl_hbkeys(hl_bytes_map*);
HL_API bool hl_hbremove(hl_bytes_map*,vbyte*);
HL_API void hl_hbset(hl_bytes_map*,vbyte*,vdynamic*);
HL_API varray* hl_hbvalues(hl_bytes_map*);
HL_API hl_int_map* hl_hialloc(void);
HL_API bool hl_hiexists(hl_int_map*,int);
HL_API vdynamic* hl_higet(hl_int_map*,int);
HL_API varray* hl_hikeys(hl_int_map*);
HL_API bool hl_hiremove(hl_int_map*,int);
HL_API void hl_hiset(hl_int_map*,int,vdynamic*);
HL_API varray* hl_hivalues(hl_int_map*);
HL_API hl_obj_map* hl_hoalloc(void);
HL_API bool hl_hoexists(hl_obj_map*,vdynamic*);
HL_API vdynamic* hl_hoget(hl_obj_map*,vdynamic*);
HL_API varray* hl_hokeys(hl_obj_map*);
HL_API bool hl_horemove(hl_obj_map*,vdynamic*);
HL_API void hl_hoset(hl_obj_map*,vdynamic*,vdynamic*);
HL_API void hl_init_kore(vbyte*,int,int,int,bool,int,int);
HL_API vbyte* hl_itos(int,int*);
HL_API float hl_kinc_bytearray_getfloat32(vbyte*,int);
HL_API int hl_kinc_bytearray_getint16(vbyte*,int);
HL_API int64 hl_kinc_bytearray_getuint32(vbyte*,int);
HL_API void hl_kinc_bytearray_setfloat32(vbyte*,int,float);
HL_API void hl_kinc_bytearray_setint16(vbyte*,int,int);
HL_API void hl_kinc_bytearray_setuint32(vbyte*,int,int64);
HL_API void hl_kinc_bytearray_setuint8(vbyte*,int,int);
HL_API vbyte* hl_kinc_bytebuffer_alloc(int);
HL_API void hl_kinc_bytebuffer_free(vbyte*);
HL_API bool hl_kinc_can_lock_mouse(int);
HL_API vbyte* hl_kinc_create_fragmentshader(vbyte*,int);
HL_API vbyte* hl_kinc_create_geometryshader(vbyte*,int);
HL_API vbyte* hl_kinc_create_indexbuffer(int);
HL_API vbyte* hl_kinc_create_pipeline(void);
HL_API vbyte* hl_kinc_create_tesscontrolshader(vbyte*,int);
HL_API vbyte* hl_kinc_create_tessevalshader(vbyte*,int);
HL_API vbyte* hl_kinc_create_vertexbuffer(int,vbyte*,int,int);
HL_API vbyte* hl_kinc_create_vertexshader(vbyte*,int);
HL_API vbyte* hl_kinc_create_vertexstructure(bool);
HL_API vbyte* hl_kinc_cubemap_create(int,int,int,int);
HL_API int hl_kinc_cubemap_target_get_height(vbyte*);
HL_API int hl_kinc_cubemap_target_get_width(vbyte*);
HL_API int hl_kinc_cubemap_texture_get_height(vbyte*);
HL_API int hl_kinc_cubemap_texture_get_width(vbyte*);
HL_API void hl_kinc_delete_pipeline(vbyte*);
HL_API int hl_kinc_display_count(void);
HL_API int hl_kinc_display_height(int);
HL_API int hl_kinc_display_init(void);
HL_API bool hl_kinc_display_is_primary(int);
HL_API int hl_kinc_display_width(int);
HL_API vbyte* hl_kinc_file_contents(vbyte*,int*);
HL_API vbyte* hl_kinc_fragmentshader_from_source(vbyte*);
HL_API void hl_kinc_generate_mipmaps_target(vbyte*,int);
HL_API void hl_kinc_generate_mipmaps_texture(vbyte*,int);
HL_API double hl_kinc_get_time(void);
HL_API int hl_kinc_get_window_height(int);
HL_API int hl_kinc_get_window_width(int);
HL_API void hl_kinc_graphics_clear(int,int,float,int);
HL_API void hl_kinc_graphics_disable_scissor(void);
HL_API void hl_kinc_graphics_draw_all_indexed_vertices(void);
HL_API void hl_kinc_graphics_draw_all_indexed_vertices_instanced(int);
HL_API void hl_kinc_graphics_draw_indexed_vertices(int,int);
HL_API void hl_kinc_graphics_draw_indexed_vertices_instanced(int,int,int);
HL_API bool hl_kinc_graphics_render_targets_inverted_y(void);
HL_API void hl_kinc_graphics_render_to_face(vbyte*,int);
HL_API void hl_kinc_graphics_render_to_texture(vbyte*);
HL_API void hl_kinc_graphics_render_to_textures(vbyte*,vbyte*,vbyte*,vbyte*,vbyte*,vbyte*,vbyte*,vbyte*,int);
HL_API void hl_kinc_graphics_restore_render_target(void);
HL_API void hl_kinc_graphics_scissor(int,int,int,int);
HL_API void hl_kinc_graphics_set_bool(vbyte*,bool);
HL_API void hl_kinc_graphics_set_cube_map_compare_mode(vbyte*,bool);
HL_API void hl_kinc_graphics_set_cubemap_depth(vbyte*,vbyte*);
HL_API void hl_kinc_graphics_set_cubemap_target(vbyte*,vbyte*);
HL_API void hl_kinc_graphics_set_cubemap_texture(vbyte*,vbyte*);
HL_API void hl_kinc_graphics_set_float(vbyte*,float);
HL_API void hl_kinc_graphics_set_float2(vbyte*,float,float);
HL_API void hl_kinc_graphics_set_float3(vbyte*,float,float,float);
HL_API void hl_kinc_graphics_set_float4(vbyte*,float,float,float,float);
HL_API void hl_kinc_graphics_set_floats(vbyte*,vbyte*,int);
HL_API void hl_kinc_graphics_set_image_texture(vbyte*,vbyte*);
HL_API void hl_kinc_graphics_set_indexbuffer(vbyte*);
HL_API void hl_kinc_graphics_set_int(vbyte*,int);
HL_API void hl_kinc_graphics_set_matrix(vbyte*,float,float,float,float,float,float,float,float,float,float,float,float,float,float,float,float);
HL_API void hl_kinc_graphics_set_matrix3(vbyte*,float,float,float,float,float,float,float,float,float);
HL_API void hl_kinc_graphics_set_render_target(vbyte*,vbyte*);
HL_API void hl_kinc_graphics_set_texture(vbyte*,vbyte*);
HL_API void hl_kinc_graphics_set_texture3d_parameters(vbyte*,int,int,int,int,int,int);
HL_API void hl_kinc_graphics_set_texture_compare_mode(vbyte*,bool);
HL_API void hl_kinc_graphics_set_texture_depth(vbyte*,vbyte*);
HL_API void hl_kinc_graphics_set_texture_parameters(vbyte*,int,int,int,int,int);
HL_API void hl_kinc_graphics_set_vertexbuffer(vbyte*);
HL_API void hl_kinc_graphics_set_vertexbuffers(vbyte*,vbyte*,vbyte*,vbyte*,int);
HL_API void hl_kinc_graphics_viewport(int,int,int,int);
HL_API vbyte* hl_kinc_indexbuffer_lock(vbyte*,int,int);
HL_API void hl_kinc_indexbuffer_unlock(vbyte*,int);
HL_API void hl_kinc_init_audio(vclosure*,vclosure*,int*);
HL_API bool hl_kinc_is_mouse_locked(int);
HL_API void hl_kinc_log(vbyte*);
HL_API void hl_kinc_mouse_lock(int);
HL_API void hl_kinc_mouse_unlock(int);
HL_API bool hl_kinc_non_pow2_textures_supported(void);
HL_API void hl_kinc_pipeline_compile(vbyte*,vbyte*,vbyte*,vbyte*,vbyte*);
HL_API vbyte* hl_kinc_pipeline_get_constantlocation(vbyte*,vbyte*);
HL_API vbyte* hl_kinc_pipeline_get_textureunit(vbyte*,vbyte*);
HL_API void hl_kinc_pipeline_set(vbyte*);
HL_API void hl_kinc_pipeline_set_fragment_shader(vbyte*,vbyte*);
HL_API void hl_kinc_pipeline_set_geometry_shader(vbyte*,vbyte*);
HL_API void hl_kinc_pipeline_set_states(vbyte*,int,int,int,int,int,int,int,int,int,int,int,int,int,int,bool,int,int,int,bool,bool,bool,bool,int,int,int,int,int,int,int,int,int,int,int,bool);
HL_API void hl_kinc_pipeline_set_tesscontrol_shader(vbyte*,vbyte*);
HL_API void hl_kinc_pipeline_set_tesseval_shader(vbyte*,vbyte*);
HL_API void hl_kinc_pipeline_set_vertex_shader(vbyte*,vbyte*);
HL_API void hl_kinc_register_callbacks(vclosure*,vclosure*,vclosure*,vclosure*,vclosure*);
HL_API void hl_kinc_register_copycutpaste(vclosure*,vclosure*,vclosure*);
HL_API void hl_kinc_register_dropfiles(vclosure*);
HL_API void hl_kinc_register_gamepad(vclosure*,vclosure*);
HL_API void hl_kinc_register_keyboard(vclosure*,vclosure*,vclosure*);
HL_API void hl_kinc_register_mouse(vclosure*,vclosure*,vclosure*,vclosure*);
HL_API void hl_kinc_register_pen(vclosure*,vclosure*,vclosure*);
HL_API void hl_kinc_register_sensor(vclosure*,vclosure*);
HL_API void hl_kinc_register_surface(vclosure*,vclosure*,vclosure*);
HL_API vbyte* hl_kinc_render_target_create(int,int,int,int,int);
HL_API int hl_kinc_render_target_get_height(vbyte*);
HL_API int hl_kinc_render_target_get_real_height(vbyte*);
HL_API int hl_kinc_render_target_get_real_width(vbyte*);
HL_API int hl_kinc_render_target_get_width(vbyte*);
HL_API int hl_kinc_render_target_set_depth_stencil_from(vbyte*,vbyte*);
HL_API void hl_kinc_render_target_unload(vbyte*);
HL_API void hl_kinc_set_mipmap_texture(vbyte*,vbyte*,int);
HL_API void hl_kinc_show_mouse(bool);
HL_API vbyte* hl_kinc_sound_init_vorbis(vbyte*,int);
HL_API vbyte* hl_kinc_sound_init_wav(vbyte*,vbyte*,int*,double*);
HL_API bool hl_kinc_sound_next_vorbis_samples(vbyte*,vbyte*,int,bool,bool);
HL_API vbyte* hl_kinc_texture_create(int,int,int,bool);
HL_API vbyte* hl_kinc_texture_create3d(int,int,int,int,bool);
HL_API vbyte* hl_kinc_texture_create_from_file(vbyte*,bool);
HL_API vbyte* hl_kinc_texture_from_bytes(vbyte*,int,int,int,bool);
HL_API vbyte* hl_kinc_texture_from_bytes3d(vbyte*,int,int,int,int,bool);
HL_API int hl_kinc_texture_get_height(vbyte*);
HL_API int hl_kinc_texture_get_real_height(vbyte*);
HL_API int hl_kinc_texture_get_real_width(vbyte*);
HL_API int hl_kinc_texture_get_width(vbyte*);
HL_API void hl_kinc_texture_unload(vbyte*);
HL_API void hl_kinc_texture_unlock(vbyte*,vbyte*);
HL_API int hl_kinc_vertexbuffer_count(vbyte*);
HL_API vbyte* hl_kinc_vertexbuffer_lock(vbyte*);
HL_API int hl_kinc_vertexbuffer_stride(vbyte*);
HL_API void hl_kinc_vertexbuffer_unlock(vbyte*,int);
HL_API vbyte* hl_kinc_vertexshader_from_source(vbyte*);
HL_API void hl_kinc_vertexstructure_add(vbyte*,vbyte*,int);
HL_API vdynamic* hl_make_closure(vdynamic*,vdynamic*);
HL_API vdynamic* hl_make_var_args(vclosure*);
HL_API double hl_math_abs(double);
HL_API double hl_math_acos(double);
HL_API double hl_math_asin(double);
HL_API double hl_math_atan(double);
HL_API double hl_math_atan2(double,double);
HL_API int hl_math_ceil(double);
HL_API double hl_math_cos(double);
HL_API double hl_math_exp(double);
HL_API int hl_math_floor(double);
HL_API bool hl_math_isfinite(double);
HL_API bool hl_math_isnan(double);
HL_API double hl_math_log(double);
HL_API double hl_math_pow(double,double);
HL_API int hl_math_round(double);
HL_API double hl_math_sin(double);
HL_API double hl_math_sqrt(double);
HL_API double hl_math_tan(double);
HL_API vdynamic* hl_no_closure(vdynamic*);
HL_API bool hl_obj_delete_field(vdynamic*,int);
HL_API varray* hl_obj_fields(vdynamic*);
HL_API vdynamic* hl_obj_get_field(vdynamic*,int);
HL_API bool hl_obj_has_field(vdynamic*,int);
HL_API void hl_obj_set_field(vdynamic*,int,vdynamic*);
HL_API double hl_parse_float(vbyte*,int,int);
HL_API vdynamic* hl_parse_int(vbyte*,int,int);
HL_API int hl_ptr_compare(vdynamic*,vdynamic*);
HL_API double hl_rnd_float(hl_random*);
HL_API hl_random* hl_rnd_init_system(void);
HL_API int hl_rnd_int(hl_random*);
HL_API void hl_run_kore(void);
HL_API void hl_set_error_handler(vclosure*);
HL_API int hl_string_compare(vbyte*,vbyte*,int);
HL_API bool hl_sys_is64(void);
HL_API void hl_sys_print(vbyte*);
HL_API bool hl_sys_utf8_path(void);
HL_API int hl_type_args_count(hl_type*);
HL_API varray* hl_type_enum_fields(hl_type*);
HL_API varray* hl_type_enum_values(hl_type*);
HL_API vdynamic* hl_type_get_global(hl_type*);
HL_API vbyte* hl_type_name(hl_type*);
HL_API bool hl_type_safe_cast(hl_type*,hl_type*);
HL_API bool hl_type_set_global(hl_type*,vdynamic*);
HL_API vbyte* hl_ucs2_lower(vbyte*,int,int);
HL_API vbyte* hl_ucs2_upper(vbyte*,int,int);
HL_API int hl_ucs2length(vbyte*,int);
HL_API vbyte* hl_url_decode(vbyte*,int*);
HL_API vbyte* hl_url_encode(vbyte*,int*);
HL_API vbyte* hl_utf16_to_utf8(vbyte*,int,int*);
HL_API vbyte* hl_utf8_to_utf16(vbyte*,int,int*);
HL_API vdynamic* hl_value_cast(vdynamic*,hl_type*);
HL_API vbyte* hl_value_to_string(vdynamic*,int*);
#endif

